{"version":3,"sources":["data/gtfs/agency.txt","data/gtfs/calendar.txt","data/gtfs/calendar_dates.txt","data/gtfs/frequencies.txt","data/gtfs/routes.txt","data/gtfs/stop_times.txt","data/gtfs/stops.txt","data/gtfs/trips.txt","lib/gtfs/utils.ts","lib/set-utils.ts","lib/time.ts","lib/multileg.ts","lib/gtfs/trips.ts","components/MultilegTable.tsx","components/ReactVisjsTimeline.tsx","components/MultilegTimeline.tsx","tribalKnowledge.tsx","components/TimeConfig.tsx","components/RouteConfig.tsx","components/ConfigSection.tsx","components/MultilegGraph.tsx","lib/gtfs/parse.ts","app-data.ts","App.tsx","index.tsx"],"names":["module","exports","getValidServiceIdsForTime","gtfsData","t","dateYMD","formatDate","weekday","getUTCDay","calendarServiceIds","calendar","filter","ce","dateValid","start_date","end_date","weekdayValid","sunday","monday","tuesday","wednesday","thursday","friday","saturday","map","service_id","addServiceIds","calendarDates","cd","date","exception_type","delServiceIds","set1","sOut","Set","sets","forEach","set","v","delete","intersect","add","union","hmsToDaySeconds","h","m","s","hmsStringToTriple","hmsString","split","bit","parseInt","LegType","computeSingleLeg","startTime","startStopId","endStopId","trips","tripStopFromToMap","possibleTripIds","Array","from","availableServiceIds","possibleTripServiceIds","tripId","tripMap","index","trip","has","undefined","Boolean","getValidTripsForStopPair","startTimeDS","getHours","getMinutes","getSeconds","hmsStringToDaySeconds","tripStopSequences","trip_id","departure_time","MultilegMachine","interStopTravelMap","driveMultipliers","disembarkTimeMin","maxFerryOptions","this","legs","length","leg","nextLegs","stopId1","stopId2","stopsKey","stop1","stopMap","stop2","mul","minutes","endTime","datefns","id","type","DRIVE","text","stop_name","remark","toFixed","next","computeMultilegBitRecur","slice","stops","dh","dm","ds","arrival_time","ah","am","as","tripStart","hours","seconds","tripEnd","FERRY","trip_headsign","ERROR","stopIds","i","push","stopSequenceToLegs","legSuccessors","legPredecessors","walk","previous","thisLegPredecessors","pleg","nleg","Object","keys","legId","plegId","MultilegTableRow","props","parentLeg","depth","accumulatedDuration","result","highlight","setHighlight","typeLogo","WAIT","getLegTypeLogo","wait","legDuration","newAccumulatedDuration","final","classes","initial","faded","className","cx","onClick","style","paddingLeft","childLeg","key","MultilegTable","interactive","events","Timeline","options","items","groups","eventHandlers","containerRef","React","useRef","timelineRef","eventHandlersRef","useEffect","current","onEvent","useCallback","eventType","arg","handlers","timeline","setOptions","setItems","VisTimeline","on","setGroups","destroy","ref","width","stack","showCurrentTime","MultilegTimeline","useMemo","itemMap","groupMap","itemClasses","itemPredecessors","l","itemId","groupId","endStopName","content","group","start","end","values","select","defaultRoute","driveTravelTimes","pair","duration","s1","s2","jsDateFormatter","parseDate","str","Date","TimeConfig","onChange","display","flex","showActionsBar","value","isUserChange","RouteConfig","setStopIds","lastStopId","nextStops","stopId","destSet","fromStop","toStop","stop_id","getDestinationStopsFromStop","fromStopId","toStopId","nextSelect","disabled","size","e","selection","target","concat","sortBy","name","idx","large","onRemove","sid","marginRight","marginTop","icon","reverse","ConfigSection","margin","onChangeDate","label","min","max","stepSize","labelStepSize","setDisembarkTimeMin","setDriveTimeMultiplier","driveTimeMultiplier","MultilegGraph","nodes","edges","startId","endId","stop","data","stopNode","edgeId","edgeLabel","source","elements","stylesheet","selector","layout","nodeDimensionsIncludeLabels","klay","direction","edgeRouting","height","border","cytoscape","use","urlMap","a","promises","fetch","resp","ok","Error","statusText","replace","trim","papaparse","parse","header","errors","console","warn","Promise","all","results","fromEntries","augmentRawGTFSData","rawData","groupBy","stopTimes","st","getTripStopFromToMap","routeMap","keyBy","routes","filterAndAugmentRawData","cutoffDate","dateCutoff","dateCutoffYMD","filterRawGTFSData","loadRawDataRequire","parseMultipleUrls","agency","require","frequencies","ResultTabs","renderActiveTabPanelOnly","title","panel","viewProps","renderButton","Expander","active","buttonActive","onButtonClick","Core","useState","setStartTime","splitEnabled","setSplitEnabled","mlm","uniq","computeMultileg","resultView","join","parseFloat","App","setGtfsData","getFilteredGTFSData","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6adf793c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/agency.d9438b70.txt\";","module.exports = __webpack_public_path__ + \"static/media/calendar.0b493ac7.txt\";","module.exports = __webpack_public_path__ + \"static/media/calendar_dates.9aefd69f.txt\";","module.exports = __webpack_public_path__ + \"static/media/frequencies.16dfdd58.txt\";","module.exports = __webpack_public_path__ + \"static/media/routes.20f1bb24.txt\";","module.exports = __webpack_public_path__ + \"static/media/stop_times.ac2e9e5a.txt\";","module.exports = __webpack_public_path__ + \"static/media/stops.013405fc.txt\";","module.exports = __webpack_public_path__ + \"static/media/trips.9e713600.txt\";","import { FromToTripMap, GTFSData, StopTime } from \"./types\";\nimport formatDate from \"date-fns/format\";\nimport { intersect, union } from \"../set-utils\";\nimport { Dictionary } from \"lodash\";\n\nexport function getTripStopFromToMap(\n  tripStopSequences: Dictionary<StopTime[]>\n): FromToTripMap {\n  const tripStopFromToMap: FromToTripMap = {};\n  for (let tripId in tripStopSequences) {\n    const stops = tripStopSequences[tripId];\n    if (stops.length !== 2) {\n      // TODO: support trips with more than 2 stops?\n      //console.warn(`trip ${tripId} has more than 2 stops?`, stops);\n      continue;\n    }\n    const [fromStop, toStop] = stops;\n    const key = `${fromStop.stop_id},${toStop.stop_id}`;\n    if (!tripStopFromToMap[key]) {\n      tripStopFromToMap[key] = new Set();\n    }\n    tripStopFromToMap[key].add(tripId);\n  }\n  return tripStopFromToMap;\n}\n\nexport function getDestinationStopsFromStop(\n  gtfsData: GTFSData,\n  stopId: string | null\n): Set<string> {\n  const destSet = new Set<string>();\n  for (let tripId in gtfsData.tripStopSequences) {\n    const stops = gtfsData.tripStopSequences[tripId];\n    if (stops.length !== 2) {\n      // TODO: support trips with more than 2 stops?\n      continue;\n    }\n    const [fromStop, toStop] = stops;\n    if (stopId === null) {\n      // If no stop was defined, get all the initial stops we\n      // know have outward routes.\n      destSet.add(fromStop.stop_id);\n    } else if (fromStop.stop_id === stopId) {\n      destSet.add(toStop.stop_id);\n    }\n  }\n  return destSet;\n}\n\nexport function getValidServiceIdsForTime(gtfsData: GTFSData, t: Date) {\n  const dateYMD = formatDate(t, \"yyyyMMdd\");\n  const weekday = t.getUTCDay(); // 0 = sunday\n  const calendarServiceIds = gtfsData.calendar\n    .filter((ce) => {\n      // console.log(ce.service_id, dateYMD, ce.start_date, ce.end_date);\n      const dateValid = ce.start_date <= dateYMD && dateYMD <= ce.end_date;\n      const weekdayValid =\n        (weekday === 0 && ce.sunday === \"1\") ||\n        (weekday === 1 && ce.monday === \"1\") ||\n        (weekday === 2 && ce.tuesday === \"1\") ||\n        (weekday === 3 && ce.wednesday === \"1\") ||\n        (weekday === 4 && ce.thursday === \"1\") ||\n        (weekday === 5 && ce.friday === \"1\") ||\n        (weekday === 6 && ce.saturday === \"1\");\n      return dateValid && weekdayValid;\n    })\n    .map((ce) => ce.service_id);\n  // 1 - Service has been added for the specified date.\n  // 2 - Service has been removed for the specified date.\n  const addServiceIds = gtfsData.calendarDates\n    .filter((cd) => cd.date === dateYMD && cd.exception_type === \"1\")\n    .map((cd) => cd.service_id);\n  const delServiceIds = gtfsData.calendarDates\n    .filter((cd) => cd.date === dateYMD && cd.exception_type === \"2\")\n    .map((cd) => cd.service_id);\n  //console.log(t, \"si\", calendarServiceIds, addServiceIds, delServiceIds);\n  return intersect(\n    union(new Set(calendarServiceIds), new Set(addServiceIds)),\n    new Set(delServiceIds)\n  );\n}\n","export function union<T>(...sets: Set<T>[]): Set<T> {\n  const sOut = new Set<T>();\n  sets.forEach((set) => set.forEach((v) => sOut.add(v)));\n  return sOut;\n}\n\nexport function intersect<T>(set1: Set<T>, ...sets: Set<T>[]): Set<T> {\n  const sOut = new Set<T>(set1);\n  sets.forEach((set) => set.forEach((v) => sOut.delete(v)));\n  return sOut;\n}\n","export function hmsToDaySeconds(h: number, m: number, s: number): number {\n  return h * 60 * 60 + m * 60 + s;\n}\n\nexport function hmsStringToTriple(hmsString: string): [number, number, number] {\n  const [h, m, s] = hmsString.split(\":\").map((bit) => parseInt(bit, 10));\n  return [h, m, s];\n}\n\nexport function hmsStringToDaySeconds(hmsString: string): number {\n  const [h, m, s] = hmsStringToTriple(hmsString);\n  return hmsToDaySeconds(h, m, s);\n}\n\nexport function dateToDaySeconds(date: Date): number {\n  const h = date.getHours();\n  const m = date.getMinutes();\n  const s = date.getSeconds();\n  return hmsToDaySeconds(h, m, s);\n}\n","import { GTFSData, Trip } from \"./gtfs/types\";\nimport { getValidTripsForStopPair } from \"./gtfs/trips\";\nimport {\n  dateToDaySeconds,\n  hmsStringToDaySeconds,\n  hmsStringToTriple,\n} from \"./time\";\nimport * as datefns from \"date-fns\";\n\nexport type InterstopMap = { [pair: string]: number };\n\nexport function computeSingleLeg(\n  gtfsData: GTFSData,\n  startTime: Date,\n  startStopId: string,\n  endStopId: string\n): Trip[] {\n  const trips = getValidTripsForStopPair(\n    gtfsData,\n    startTime,\n    startStopId,\n    endStopId\n  );\n  const startTimeDS = dateToDaySeconds(startTime);\n  return trips.filter((t) => {\n    const stops = gtfsData.tripStopSequences[t.trip_id];\n    return hmsStringToDaySeconds(stops[0].departure_time) >= startTimeDS;\n  });\n}\n\ntype LegList = Array<[string, string]>;\n\nfunction stopSequenceToLegs(stopIds: string[]): LegList {\n  const legs: LegList = [];\n  for (var i = 1; i < stopIds.length; i++) {\n    legs.push([stopIds[i - 1], stopIds[i]]);\n  }\n  return legs;\n}\n\nexport enum LegType {\n  ERROR = \"error\",\n  WAIT = \"wait\",\n  DRIVE = \"drive\",\n  FERRY = \"ferry\",\n}\n\nexport interface Leg {\n  id: string;\n  type: LegType;\n  text: string;\n  remark?: string;\n  startTime: Date;\n  endTime: Date;\n  startStopId: string;\n  endStopId: string;\n  trip?: Trip;\n  next: Leg[];\n}\n\ntype LegRelationMap = { [id: string]: Set<string> };\n\nexport interface MultilegResult {\n  legs: Leg[];\n  legPredecessors: LegRelationMap;\n  legSuccessors: LegRelationMap;\n}\n\nexport class MultilegMachine {\n  private readonly interStopTravelMap: InterstopMap;\n  private readonly gtfsData: GTFSData;\n  private readonly driveMultipliers: number[];\n  private readonly disembarkTimeMin: number;\n  private readonly maxFerryOptions: number = 5;\n\n  constructor(\n    gtfsData: GTFSData,\n    interStopTravelMap: InterstopMap,\n    driveMultipliers: number[],\n    disembarkTimeMin: number = 0\n  ) {\n    this.gtfsData = gtfsData;\n    this.interStopTravelMap = interStopTravelMap;\n    this.driveMultipliers = driveMultipliers;\n    this.disembarkTimeMin = disembarkTimeMin;\n  }\n\n  private computeMultilegBitRecur(startTime: Date, legs: LegList): Leg[] {\n    if (!legs.length) {\n      return [];\n    }\n    const [leg, ...nextLegs] = legs;\n    const [stopId1, stopId2] = leg;\n    const stopsKey = `${stopId1},${stopId2}`;\n    const stop1 = this.gtfsData.stopMap[stopId1];\n    const stop2 = this.gtfsData.stopMap[stopId2];\n    if (this.interStopTravelMap[stopsKey]) {\n      let multipliers = nextLegs.length > 0 ? this.driveMultipliers : [1];\n      return multipliers.map((mul) => {\n        const minutes = this.interStopTravelMap[stopsKey] * mul;\n        const endTime = datefns.add(startTime, { minutes });\n        return {\n          id: `${stopId1}-${stopId2}-${+startTime}-${+endTime}`,\n          type: LegType.DRIVE,\n          text: `${stop1.stop_name} -> ${stop2.stop_name}`,\n          remark:\n            mul !== 1 ? `${mul.toFixed(1)}x traffic adjustment` : undefined,\n          startTime,\n          endTime,\n          startStopId: stopId1,\n          endStopId: stopId2,\n          next: this.computeMultilegBitRecur(endTime, nextLegs),\n        };\n      });\n    } else {\n      const trips = computeSingleLeg(\n        this.gtfsData,\n        startTime,\n        stopId1,\n        stopId2\n      ).slice(0, this.maxFerryOptions);\n      if (!trips.length) {\n        return [\n          {\n            id: `${stopId1}-${stopId2}-${+startTime}-error`,\n            type: LegType.ERROR,\n            text: `no valid route: ${stop1.stop_name} -> ${stop2.stop_name}`,\n            startTime,\n            endTime: startTime,\n            startStopId: stopId1,\n            endStopId: stopId2,\n            next: [],\n          },\n        ];\n      }\n      return trips.map((trip) => {\n        const stops = this.gtfsData.tripStopSequences[trip.trip_id];\n        // TODO: does not take day-wrapping into account\n        const [dh, dm, ds] = hmsStringToTriple(stops[0].departure_time);\n        const [ah, am, as] = hmsStringToTriple(stops[1].arrival_time);\n        const tripStart = datefns.set(startTime, {\n          hours: dh,\n          minutes: dm,\n          seconds: ds,\n        });\n        const tripEnd = datefns.add(\n          datefns.set(startTime, { hours: ah, minutes: am, seconds: as }),\n          { minutes: this.disembarkTimeMin }\n        );\n        return {\n          id: `${trip.trip_id}`,\n          type: LegType.FERRY,\n          text: trip.trip_headsign,\n          startTime: tripStart,\n          endTime: tripEnd,\n          startStopId: stopId1,\n          endStopId: stopId2,\n          next: this.computeMultilegBitRecur(tripEnd, nextLegs),\n        };\n      });\n    }\n  }\n\n  public computeMultileg(startTime: Date, stopIds: string[]): MultilegResult {\n    const legs = this.computeMultilegBitRecur(\n      startTime,\n      stopSequenceToLegs(stopIds)\n    );\n    const legSuccessors: LegRelationMap = {};\n    const legPredecessors: LegRelationMap = {};\n\n    function walk(leg: Leg, previous: Array<Leg> = []) {\n      const thisLegPredecessors = (legPredecessors[leg.id] =\n        legPredecessors[leg.id] || new Set());\n      previous.forEach((pleg) => thisLegPredecessors.add(pleg.id));\n      leg.next.forEach((nleg) => walk(nleg, [...previous, leg]));\n    }\n\n    legs.forEach((leg) => walk(leg));\n    Object.keys(legPredecessors).forEach((legId) => {\n      legPredecessors[legId].forEach((plegId) => {\n        const thisLegSuccessors = (legSuccessors[plegId] =\n          legSuccessors[plegId] || new Set());\n        thisLegSuccessors.add(legId);\n      });\n    });\n    return { legs, legSuccessors, legPredecessors };\n  }\n}\n","import { GTFSData, Trip } from \"./types\";\nimport { getValidServiceIdsForTime } from \"./utils\";\n\nexport function getValidTripsForStopPair(\n  gtfsData: GTFSData,\n  t: Date,\n  startStopId: string,\n  endStopId: string\n) {\n  const { tripStopFromToMap } = gtfsData;\n  const possibleTripIds = Array.from(\n    tripStopFromToMap[`${startStopId},${endStopId}`] || []\n  );\n  const availableServiceIds = getValidServiceIdsForTime(gtfsData, t);\n  const possibleTripServiceIds = new Set();\n  possibleTripIds.forEach((tripId) =>\n    possibleTripServiceIds.add(gtfsData.tripMap[tripId].service_id)\n  );\n  const validTrips = possibleTripIds\n    .map((tripId, index) => {\n      const trip = gtfsData.tripMap[tripId];\n      return trip && availableServiceIds.has(trip.service_id)\n        ? trip\n        : undefined;\n    })\n    .filter(Boolean) as Trip[];\n  // console.group(`${startStopId} -> ${endStopId} at ${t}`);\n  // console.log('possible trips', possibleTripIds.length);\n  // console.log('possible trips services', possibleTripServiceIds);\n  // console.log('available services', availableServiceIds);\n  // console.log('resulting valid trips', validTrips.length);\n  // console.groupEnd();\n  return validTrips;\n}\n","import { Leg, LegType } from \"../lib/multileg\";\nimport * as datefns from \"date-fns\";\nimport cx from \"classnames\";\nimport React from \"react\";\nimport { ViewProps } from \"./types\";\nimport { HTMLTable } from \"@blueprintjs/core\";\n\ninterface MultilegTableRowProps extends ViewProps {\n  leg: Leg;\n  parentLeg?: Leg;\n  depth: number;\n  accumulatedDuration?: number;\n}\n\nfunction getLegTypeLogo(leg: Leg): string {\n  switch (leg.type) {\n    case LegType.ERROR:\n      return \"⚡\";\n    case LegType.DRIVE:\n      return \"🚗\";\n    case LegType.FERRY:\n      return \"🚤\";\n    case LegType.WAIT:\n      return \"⏳\";\n  }\n  return \"???\";\n}\n\nfunction MultilegTableRow(props: MultilegTableRowProps) {\n  const {\n    leg,\n    parentLeg,\n    depth,\n    accumulatedDuration,\n    result,\n    highlight,\n    setHighlight,\n  } = props;\n  const typeLogo = getLegTypeLogo(leg);\n  const wait = parentLeg\n    ? datefns.differenceInMinutes(leg.startTime, parentLeg.endTime)\n    : undefined;\n  const legDuration = datefns.differenceInMinutes(leg.endTime, leg.startTime);\n  const newAccumulatedDuration = (accumulatedDuration || 0) + legDuration;\n  let final = leg.next.length === 0;\n  let initial = depth === 0;\n  const classes: { [key: string]: boolean } = { initial, final };\n  if (\n    highlight &&\n    !(highlight === leg.id || result.legPredecessors[leg.id].has(highlight))\n  ) {\n    classes.faded = true;\n  }\n  if (highlight === leg.id) {\n    classes.highlight = true;\n  }\n\n  return (\n    <>\n      <tr\n        className={cx(classes)}\n        onClick={() => setHighlight(highlight === leg.id ? undefined : leg.id)}\n      >\n        <td className=\"dt st\">{datefns.format(leg.startTime, \"HH:mm\")}</td>\n        <td className=\"dt et\">{datefns.format(leg.endTime, \"HH:mm\")}</td>\n        <td className=\"dt du\">{legDuration} min</td>\n        <td className=\"dt wt\">\n          {wait !== undefined && wait > 0 ? `${wait} min` : null}\n        </td>\n        <td className=\"tl\">{typeLogo}</td>\n        <td className=\"tx\">\n          <div style={{ paddingLeft: `${depth}em` }}>\n            {leg.text}\n            <span className=\"remark\">{leg.remark}</span>\n          </div>\n        </td>\n        <td className=\"dt adu\">\n          {final ? <>{newAccumulatedDuration} min</> : null}\n        </td>\n      </tr>\n      {leg.next.map((childLeg, i) => (\n        <MultilegTableRow\n          {...props}\n          leg={childLeg}\n          parentLeg={leg}\n          key={i}\n          depth={depth + 1}\n          accumulatedDuration={newAccumulatedDuration}\n        />\n      ))}\n    </>\n  );\n}\n\nexport function MultilegTable(props: ViewProps) {\n  return (\n    <HTMLTable id=\"t\" interactive>\n      <thead>\n        <tr>\n          <th>Start</th>\n          <th>End</th>\n          <th>Dur</th>\n          <th>Wait</th>\n          <th>Type</th>\n          <th>Description</th>\n          <th>Total Dur</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.result.legs.map((leg, i) => (\n          <MultilegTableRow {...props} leg={leg} key={i} depth={0} />\n        ))}\n      </tbody>\n    </HTMLTable>\n  );\n}\n","import {\n  Timeline as VisTimeline,\n  DataGroupCollectionType,\n  DataItemCollectionType,\n  TimelineOptions,\n} from \"vis-timeline\";\nimport \"vis-timeline/dist/vis-timeline-graph2d.min.css\";\nimport React from \"react\";\n\ntype VisEventCallback = (properties: any) => void;\n\nconst events = [\n  \"changed\",\n  \"click\",\n  \"contextmenu\",\n  \"currentTimeTick\",\n  \"doubleClick\",\n  \"drop\",\n  \"groupDragged\",\n  \"itemout\",\n  \"itemover\",\n  \"mouseDown\",\n  \"mouseMove\",\n  \"mouseOver\",\n  \"mouseUp\",\n  \"rangechange\",\n  \"rangechanged\",\n  \"select\",\n  \"timechange\",\n  \"timechanged\",\n];\n\ninterface TimelineProps {\n  options: TimelineOptions;\n  items: DataItemCollectionType;\n  groups?: DataGroupCollectionType;\n  eventHandlers?: { [key: string]: VisEventCallback };\n}\n\nconst Timeline: React.FC<TimelineProps> = ({\n  options,\n  items,\n  groups,\n  eventHandlers,\n}) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const timelineRef = React.useRef<VisTimeline | null>(null);\n  const eventHandlersRef = React.useRef(eventHandlers);\n  React.useEffect(() => {\n    eventHandlersRef.current = eventHandlers;\n  }, [eventHandlers]);\n  const onEvent = React.useCallback((eventType, arg) => {\n    let handlers = eventHandlersRef.current;\n    if (handlers && eventType in handlers) {\n      handlers[eventType](arg);\n    }\n  }, []);\n  React.useEffect(() => {\n    if (containerRef.current) {\n      let timeline = timelineRef.current;\n      if (!timeline) {\n        timeline = new VisTimeline(containerRef.current, items, options);\n        events.forEach(\n          (eventType) =>\n            timeline && timeline.on(eventType, (arg) => onEvent(eventType, arg))\n        );\n        timelineRef.current = timeline;\n      } else {\n        timeline.setOptions(options);\n        timeline.setItems(items);\n      }\n      timeline.setGroups(groups);\n    }\n    return () => {\n      if (timelineRef.current) {\n        timelineRef.current.destroy();\n        timelineRef.current = null;\n      }\n    };\n  }, [onEvent, items, options, groups, containerRef]);\n  return <div ref={containerRef} />;\n};\n\nexport default Timeline;\n","import { Leg } from \"../lib/multileg\";\nimport Timeline from \"./ReactVisjsTimeline\";\nimport React from \"react\";\nimport { DataGroup, DataItem, TimelineOptions } from \"vis-timeline\";\nimport cx from \"classnames\";\nimport { ViewProps } from \"./types\";\n\nconst options: TimelineOptions = {\n  width: \"100%\",\n  stack: true,\n  showCurrentTime: true,\n  // zoomMin: 1000000,\n  // type: \"background\",\n  // format: {\n  //   minorLabels: {\n  //     minute: \"h:mma\",\n  //     hour: \"ha\",\n  //   },\n  // },\n};\n\nexport function MultilegTimeline({\n  gtfsData,\n  result,\n  highlight,\n  setHighlight,\n}: ViewProps) {\n  const { legs, legPredecessors } = result;\n  const [items, groups] = React.useMemo(() => {\n    const itemMap: { [id: string]: DataItem } = {};\n    const groupMap: { [id: string]: DataGroup } = {};\n    const itemClasses: { [id: string]: { [cls: string]: boolean } } = {};\n    const itemPredecessors: { [id: string]: Set<string> } = {};\n\n    function walk(leg: Leg, previous: Array<[Leg, string]>) {\n      const itemId = leg.id;\n      const groupId = `${leg.startStopId}-${leg.endStopId}`;\n      if (!(groupId in groupMap)) {\n        const endStopName = gtfsData.stopMap[leg.endStopId].stop_name;\n        groupMap[groupId] = {\n          id: groupId,\n          content: `${leg.type} to ${endStopName}`,\n        };\n      }\n      const classes = (itemClasses[itemId] = itemClasses[itemId] || {});\n      itemPredecessors[itemId] = legPredecessors[leg.id]; // just in case we accidentally alias item ids\n      classes[leg.type] = true;\n      if (!leg.next.length) {\n        classes.final = true;\n      }\n      if (!previous.length) {\n        classes.initial = true;\n      }\n      itemMap[itemId] = {\n        id: itemId,\n        group: groupId,\n        start: leg.startTime,\n        end: leg.endTime,\n        content: leg.text,\n      };\n      leg.next.forEach((l) => walk(l, [...previous, [leg, itemId]]));\n    }\n\n    legs.forEach((l) => walk(l, []));\n\n    if (highlight) {\n      for (let itemId in itemMap) {\n        if (itemId !== highlight && !itemPredecessors[itemId].has(highlight)) {\n          itemClasses[itemId].faded = true;\n        }\n      }\n    }\n    for (let itemId in itemClasses) {\n      if (itemMap[itemId]) {\n        itemMap[itemId].className = cx(itemClasses[itemId]);\n      }\n    }\n    return [[...Object.values(itemMap)], [...Object.values(groupMap)]];\n  }, [gtfsData.stopMap, legs, legPredecessors, highlight]);\n  const onSelect = ({ items }: { items: string }) => setHighlight(items[0]);\n  return (\n    <Timeline\n      options={options}\n      items={items}\n      groups={groups}\n      eventHandlers={{ select: onSelect }}\n    />\n  );\n}\n","import { InterstopMap } from \"./lib/multileg\";\n\nconst turkuStopId = \"1\";\nconst parainenStopId = \"3\";\nconst nauvoProstvikStopId = \"4\";\nconst nauvoParnasStopId = \"29\";\nconst korpoRetaisStopId = \"6\";\nconst korpoCentrumStopId = \"24\";\nexport const defaultRoute = [\n  turkuStopId,\n  parainenStopId,\n  nauvoProstvikStopId,\n  nauvoParnasStopId,\n  korpoRetaisStopId,\n  korpoCentrumStopId,\n];\n\nexport const driveTravelPairs: [[string, string], number][] = [\n  [[nauvoProstvikStopId, nauvoParnasStopId], 30],\n  [[korpoRetaisStopId, korpoCentrumStopId], 30],\n  [[turkuStopId, parainenStopId], 45],\n];\nexport const driveTravelTimes: InterstopMap = {};\ndriveTravelPairs.forEach(([pair, duration]) => {\n  const [s1, s2] = pair;\n  driveTravelTimes[`${s1},${s2}`] = duration;\n  driveTravelTimes[`${s2},${s1}`] = duration;\n});\n","import * as datefns from \"date-fns\";\nimport React from \"react\";\nimport { DateInput, IDateFormatProps, TimePicker } from \"@blueprintjs/datetime\";\n\nconst jsDateFormatter: IDateFormatProps = {\n  // note that the native implementation of Date functions differs between browsers\n  formatDate: (date) => datefns.format(date, \"yyyy-MM-dd\"),\n  parseDate: (str) => new Date(str),\n};\n\ntype TimeConfigProps = { date: Date; onChange: (date: Date) => void };\n\nexport function TimeConfig({ date, onChange }: TimeConfigProps) {\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={{ flex: 1 }}>\n        <DateInput\n          {...jsDateFormatter}\n          showActionsBar\n          value={date}\n          onChange={(date, isUserChange) =>\n            isUserChange ? onChange(date) : null\n          }\n        />\n      </div>\n      <div style={{ flex: 1 }}>\n        <TimePicker value={date} onChange={onChange} />\n      </div>\n    </div>\n  );\n}\n","import { GTFSData } from \"../lib/gtfs/types\";\nimport { InterstopMap } from \"../lib/multileg\";\nimport React from \"react\";\nimport { getDestinationStopsFromStop } from \"../lib/gtfs/utils\";\nimport { reverse, sortBy } from \"lodash\";\nimport { Button, HTMLSelect, Tag } from \"@blueprintjs/core\";\n\ninterface RouteConfigProps {\n  stopIds: string[];\n  setStopIds: (stopIds: string[]) => void;\n  gtfsData: GTFSData;\n  driveTravelTimes: InterstopMap;\n}\n\nexport function RouteConfig({\n  stopIds,\n  setStopIds,\n  gtfsData,\n  driveTravelTimes,\n}: RouteConfigProps) {\n  const lastStopId = stopIds.length ? stopIds[stopIds.length - 1] : null;\n  const nextStops = getDestinationStopsFromStop(gtfsData, lastStopId);\n  if (lastStopId) {\n    Object.keys(driveTravelTimes).forEach((key) => {\n      const [fromStopId, toStopId] = key.split(\",\");\n      if (fromStopId === lastStopId) {\n        nextStops.add(toStopId);\n      }\n    });\n  }\n  const nextSelect = (\n    <HTMLSelect\n      disabled={!nextStops.size}\n      onChange={(e) => {\n        const selection = e.target.value;\n        if (nextStops.has(selection)) {\n          setStopIds(stopIds.concat([selection]));\n        }\n      }}\n    >\n      <option value=\"\">Add...</option>\n      {sortBy(\n        Array.from(nextStops).map((stopId) => [\n          stopId,\n          gtfsData.stopMap[stopId].stop_name,\n        ]),\n        1\n      ).map(([stopId, name]) => (\n        <option key={stopId} value={stopId}>\n          {name}\n        </option>\n      ))}\n    </HTMLSelect>\n  );\n  return (\n    <>\n      <div>\n        {stopIds.map((stopId, idx) => (\n          <Tag\n            key={idx}\n            large\n            onRemove={() => setStopIds(stopIds.filter((sid) => sid !== stopId))}\n            style={{ marginRight: \".5em\" }}\n          >\n            {gtfsData.stopMap[stopId].stop_name}\n          </Tag>\n        ))}\n      </div>\n      <div style={{ marginTop: \".5em\" }}>\n        {nextSelect}{\" \"}\n        <Button\n          icon=\"refresh\"\n          disabled={!stopIds.length}\n          onClick={() => setStopIds(reverse([...stopIds]))}\n        >\n          Reverse\n        </Button>{\" \"}\n        <Button\n          icon=\"delete\"\n          disabled={!stopIds.length}\n          onClick={() => setStopIds([])}\n        >\n          Clear\n        </Button>\n      </div>\n    </>\n  );\n}\n","import { Card, FormGroup, H5, Slider } from \"@blueprintjs/core\";\nimport { TimeConfig } from \"./TimeConfig\";\nimport { RouteConfig } from \"./RouteConfig\";\nimport { driveTravelTimes } from \"../tribalKnowledge\";\nimport React from \"react\";\nimport { GTFSData } from \"../lib/gtfs/types\";\n\ninterface ConfigSectionProps {\n  gtfsData: GTFSData;\n  date: Date;\n  onChangeDate: (value: Date) => void;\n  stopIds: string[];\n  setStopIds: (value: string[]) => void;\n  setDisembarkTimeMin: (value: number) => void;\n  disembarkTimeMin: number;\n  setDriveTimeMultiplier: (v: number) => void;\n  driveTimeMultiplier: number;\n}\n\nexport function ConfigSection(props: ConfigSectionProps) {\n  return (\n    <div style={{ display: \"flex\" }}>\n      <Card style={{ flex: 1, margin: \".5em\" }}>\n        <H5>Departure Time</H5>\n        <TimeConfig date={props.date} onChange={props.onChangeDate} />\n      </Card>\n      <Card style={{ flex: 3, margin: \".5em\" }}>\n        <H5>Route</H5>\n        <RouteConfig\n          stopIds={props.stopIds}\n          setStopIds={props.setStopIds}\n          gtfsData={props.gtfsData}\n          driveTravelTimes={driveTravelTimes}\n        />\n      </Card>\n      <Card style={{ flex: 1, margin: \".5em\" }}>\n        <H5>Options</H5>\n        <FormGroup label=\"Disembarkation time (min)\">\n          <Slider\n            min={0}\n            max={20}\n            stepSize={1}\n            labelStepSize={5}\n            onChange={props.setDisembarkTimeMin}\n            value={props.disembarkTimeMin}\n          />\n        </FormGroup>\n        <FormGroup label=\"Drive time multiplier\">\n          <Slider\n            min={0}\n            max={2}\n            stepSize={0.1}\n            labelStepSize={0.5}\n            onChange={props.setDriveTimeMultiplier}\n            value={props.driveTimeMultiplier}\n          />\n        </FormGroup>\n      </Card>\n    </div>\n  );\n}\n","import { Leg, LegType } from \"../lib/multileg\";\nimport cytoscape, { ElementDefinition } from \"cytoscape\";\nimport klay from \"cytoscape-klay\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\n\nimport * as datefns from \"date-fns\";\nimport React from \"react\";\nimport { ViewProps } from \"./types\";\n\ncytoscape.use(klay);\n\nexport function MultilegGraph({ gtfsData, result }: ViewProps) {\n  const { legs } = result;\n  const nodes: { [id: string]: ElementDefinition } = {};\n  const edges: { [id: string]: ElementDefinition } = {};\n\n  function stopNode(stopId: string): string {\n    const id = `stop-${stopId}`;\n    if (!nodes[id]) {\n      const stop = gtfsData.stopMap[stopId];\n      nodes[id] = {\n        data: { id, label: stop.stop_name },\n      };\n    }\n    return id;\n  }\n\n  function walk(leg: Leg, previous: Array<[Leg, string, string]>) {\n    let startId = \"\",\n      endId = \"\";\n    if (!previous.length) {\n      startId = stopNode(leg.startStopId);\n    } else {\n      startId = previous[previous.length - 1][2];\n    }\n    if (false) {\n      //!leg.next.length) {\n      endId = stopNode(leg.endStopId);\n    } else {\n      endId = `${leg.endStopId}-${leg.endTime}`;\n      const stop = gtfsData.stopMap[leg.endStopId];\n      nodes[endId] = {\n        data: {\n          id: endId,\n          label: `${stop.stop_name} at ${datefns.format(leg.endTime, \"HH:mm\")}`,\n        },\n      };\n    }\n\n    const edgeId = `${startId}-${endId}-${leg.startTime}`;\n    const legDuration = datefns.differenceInMinutes(leg.endTime, leg.startTime);\n    const parentLeg = previous.length\n      ? previous[previous.length - 1][0]\n      : undefined;\n    const wait = parentLeg\n      ? datefns.differenceInMinutes(leg.startTime, parentLeg.endTime)\n      : undefined;\n    let edgeLabel =\n      (wait ? `${wait}min wait, ` : \"\") + `${legDuration}min ${leg.type}`;\n    edges[edgeId] = {\n      data: {\n        id: edgeId,\n        source: startId,\n        target: endId,\n        label: edgeLabel,\n      },\n      classes: `${leg.type}`,\n    };\n    leg.next.forEach((l) => walk(l, [...previous, [leg, startId, endId]]));\n  }\n\n  legs.forEach((l) => walk(l, []));\n\n  return (\n    <CytoscapeComponent\n      elements={[...Object.values(nodes), ...Object.values(edges)]}\n      stylesheet={[\n        {\n          selector: \"node\",\n          style: {\n            label: \"data(label)\",\n          },\n        },\n        {\n          selector: \"edge\",\n          style: {\n            label: \"data(label)\",\n            \"curve-style\": \"straight\",\n          },\n        },\n        {\n          selector: \"edge.ferry\",\n          style: {\n            \"line-color\": \"navy\",\n          },\n        },\n      ]}\n      layout={{\n        name: \"klay\",\n        nodeDimensionsIncludeLabels: true,\n        klay: {\n          direction: \"RIGHT\",\n          edgeRouting: \"SPLINES\",\n        },\n      }}\n      style={{ width: \"100%\", height: \"600px\", border: \"1px solid orange\" }}\n    />\n  );\n}\n","import papaparse from \"papaparse\";\nimport { GTFSData, RawGTFSData } from \"./types\";\nimport { groupBy, keyBy } from \"lodash\";\nimport { getTripStopFromToMap } from \"./utils\";\nimport formatDate from \"date-fns/format\";\n\nexport async function parseMultipleUrls<T extends object>(urlMap: {\n  [key: string]: string;\n}): Promise<T> {\n  const promises = Object.keys(urlMap).map(async (key) => {\n    const resp = await fetch(urlMap[key]);\n    if (!resp.ok) throw new Error(resp.statusText);\n    const text = (await resp.text()).replace(/[\\r\\n]+/g, \"\\n\").trim();\n    const result = papaparse.parse(text, {\n      header: true,\n    });\n    if (result.errors?.length) console.warn(key, result.errors);\n    return [key, result.data];\n  });\n  const results = await Promise.all(promises);\n  return Object.fromEntries(results);\n}\n\nexport function filterRawGTFSData(rawData: RawGTFSData, dateCutoff: Date) {\n  const dateCutoffYMD = formatDate(dateCutoff, \"yyyyMMdd\");\n  rawData.calendarDates = rawData.calendarDates.filter(\n    (cd) => cd.date >= dateCutoffYMD\n  );\n  rawData.calendar = rawData.calendar.filter(\n    (ce) => ce.end_date >= dateCutoffYMD\n  );\n}\n\nexport function augmentRawGTFSData(rawData: RawGTFSData): GTFSData {\n  const tripStopSequences = groupBy(rawData.stopTimes, (st) => st.trip_id);\n  const tripStopFromToMap = getTripStopFromToMap(tripStopSequences);\n  return {\n    ...rawData,\n    routeMap: keyBy(rawData.routes, \"route_id\"),\n    stopMap: keyBy(rawData.stops, \"stop_id\"),\n    tripMap: keyBy(rawData.trips, \"trip_id\"),\n    tripStopSequences,\n    tripStopFromToMap,\n  };\n}\n","import { GTFSData, RawGTFSData } from \"./lib/gtfs/types\";\nimport {\n  augmentRawGTFSData,\n  filterRawGTFSData,\n  parseMultipleUrls,\n} from \"./lib/gtfs/parse\";\n\nfunction filterAndAugmentRawData(\n  rawData: RawGTFSData,\n  cutoffDate?: Date\n): GTFSData {\n  if (cutoffDate) {\n    filterRawGTFSData(rawData, cutoffDate);\n  }\n  return augmentRawGTFSData(rawData);\n}\n\nfunction loadRawDataRequire(): Promise<RawGTFSData> {\n  return parseMultipleUrls<RawGTFSData>({\n    agency: require(\"./data/gtfs/agency.txt\"),\n    calendar: require(\"./data/gtfs/calendar.txt\"),\n    calendarDates: require(\"./data/gtfs/calendar_dates.txt\"),\n    frequencies: require(\"./data/gtfs/frequencies.txt\"),\n    routes: require(\"./data/gtfs/routes.txt\"),\n    stopTimes: require(\"./data/gtfs/stop_times.txt\"),\n    stops: require(\"./data/gtfs/stops.txt\"),\n    trips: require(\"./data/gtfs/trips.txt\"),\n  });\n}\n\nexport async function getFilteredGTFSData() {\n  const rawData = await loadRawDataRequire();\n  return filterAndAugmentRawData(rawData, new Date(2020, 0));\n}\n","import React from \"react\";\nimport { GTFSData } from \"./lib/gtfs/types\";\nimport { MultilegMachine } from \"./lib/multileg\";\nimport * as datefns from \"date-fns\";\nimport { MultilegTable } from \"./components/MultilegTable\";\nimport { MultilegTimeline } from \"./components/MultilegTimeline\";\nimport { defaultRoute, driveTravelTimes } from \"./tribalKnowledge\";\nimport { Button, NonIdealState, Tab, Tabs } from \"@blueprintjs/core\";\nimport { uniq } from \"lodash\";\nimport { ConfigSection } from \"./components/ConfigSection\";\nimport { MultilegGraph } from \"./components/MultilegGraph\";\nimport { ViewProps } from \"./components/types\";\nimport { getFilteredGTFSData } from \"./app-data\";\n\nfunction App() {\n  const [gtfsData, setGtfsData] = React.useState<GTFSData | undefined>();\n  React.useEffect(() => {\n    getFilteredGTFSData().then(setGtfsData);\n  }, []);\n\n  if (gtfsData === undefined) return null;\n  return <Core gtfsData={gtfsData} />;\n}\n\nfunction ResultTabs(props: {\n  id: string;\n  viewProps: ViewProps;\n  renderButton?: boolean;\n  buttonActive?: boolean;\n  onButtonClick?: () => void;\n}) {\n  return (\n    <Tabs id={props.id} renderActiveTabPanelOnly>\n      <Tab\n        id=\"timeline\"\n        title=\"Timeline\"\n        panel={<MultilegTimeline {...props.viewProps} />}\n      />\n      <Tab\n        id=\"table\"\n        title=\"Table\"\n        panel={<MultilegTable {...props.viewProps} />}\n      />\n      <Tab\n        id=\"graph\"\n        title=\"Graph\"\n        panel={<MultilegGraph {...props.viewProps} />}\n      />\n      {props.renderButton ? (\n        <>\n          <Tabs.Expander />\n          <Button\n            icon=\"split-columns\"\n            active={props.buttonActive}\n            onClick={props.onButtonClick}\n          >\n            Split\n          </Button>\n        </>\n      ) : null}\n    </Tabs>\n  );\n}\n\nfunction Core({ gtfsData }: { gtfsData: GTFSData }) {\n  const [highlight, setHighlight] = React.useState<string | undefined>();\n  const [startTime, setStartTime] = React.useState(() => new Date()); //new Date(2020, 3, 13, 12, 10, 0));\n  const [stopIds, setStopIds] = React.useState(() => [...defaultRoute]);\n  const [disembarkTimeMin, setDisembarkTimeMin] = React.useState(3);\n  const [driveTimeMultiplier, setDriveTimeMultiplier] = React.useState(1.5);\n  const [splitEnabled, setSplitEnabled] = React.useState(false);\n  const mlm = React.useMemo(\n    () =>\n      new MultilegMachine(\n        gtfsData,\n        driveTravelTimes,\n        uniq([1, driveTimeMultiplier]),\n        disembarkTimeMin\n      ),\n    [gtfsData, disembarkTimeMin, driveTimeMultiplier]\n  );\n  const result = React.useMemo(() => mlm.computeMultileg(startTime, stopIds), [\n    mlm,\n    startTime,\n    stopIds,\n  ]);\n  const viewProps: ViewProps = { gtfsData, result, highlight, setHighlight };\n  const resultView = result.legs.length ? (\n    <>\n      <h1>\n        {datefns.format(startTime, \"dd.MM.yyyy HH:mm\")}\n        <br />\n        {stopIds\n          .map((stopId) => gtfsData.stopMap[stopId])\n          .map((s) => s.stop_name)\n          .join(\" - \")}\n      </h1>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flex: 1 }}>\n          <ResultTabs\n            id=\"tabs1\"\n            viewProps={viewProps}\n            renderButton\n            buttonActive={splitEnabled}\n            onButtonClick={() => setSplitEnabled(!splitEnabled)}\n          />\n        </div>\n\n        {splitEnabled ? (\n          <div style={{ flex: 1 }}>\n            <ResultTabs id=\"tabs2\" viewProps={viewProps} />\n          </div>\n        ) : null}\n      </div>\n    </>\n  ) : (\n    <NonIdealState icon=\"search\" title=\"No results\" />\n  );\n  return (\n    <div className=\"App\">\n      <ConfigSection\n        date={startTime}\n        onChangeDate={setStartTime}\n        stopIds={stopIds}\n        setStopIds={setStopIds}\n        gtfsData={gtfsData}\n        setDisembarkTimeMin={setDisembarkTimeMin}\n        disembarkTimeMin={disembarkTimeMin}\n        setDriveTimeMultiplier={(v) =>\n          setDriveTimeMultiplier(parseFloat(v.toFixed(2)))\n        }\n        driveTimeMultiplier={driveTimeMultiplier}\n      />\n      {resultView}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nimport App from \"./App\";\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorker.register();\n"],"sourceRoot":""}